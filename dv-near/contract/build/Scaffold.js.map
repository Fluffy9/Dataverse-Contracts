{"version":3,"file":"Scaffold.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../src/Scaffold.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nexport function u8ArrayToBytes(array) {\n    return array.reduce((result, value) => `${result}${String.fromCharCode(value)}`, \"\");\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    return Uint8Array.from([...bytes].map((byte) => byte.charCodeAt(0)));\n}\n/**\n * Accepts a string or Uint8Array and either checks for the validity of the string or converts the Uint8Array to Bytes.\n *\n * @param stringOrU8Array - The string or Uint8Array to be checked/transformed\n * @returns Safe Bytes to be used in NEAR calls.\n */\nexport function bytes(stringOrU8Array) {\n    if (typeof stringOrU8Array === \"string\") {\n        return checkStringIsBytes(stringOrU8Array);\n    }\n    if (stringOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(stringOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(value) {\n    [...value].forEach((character, index) => {\n        assert(character.charCodeAt(0) <= 255, `string ${value} at index ${index}: ${character} is not a valid byte`);\n    });\n    return value;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    });\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(valueToDeserialize, (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from \"@scure/base\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data.charCodeAt(0));\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data.charCodeAt(0));\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = bytes(base58.decode(keyData));\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(`${String.fromCharCode(curve)}${data}`);\n    }\n}\n","import { assert } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageRead(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWrite(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemove(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturn(value) {\n    env.value_return(value);\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWrite(\"STATE\", this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value);\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","// Find all our documentation at https://docs.near.org\nimport { NearBindgen, near, call, view, initialize, validateAccountId, bytes, assert, LookupMap } from 'near-sdk-js';\nimport { blockTimestamp, predecessorAccountId, signerAccountId } from 'near-sdk-js/lib/api';\nimport { AccountId } from \"near-sdk-js/lib/types\";\n\n\n@NearBindgen({ requireInit: true })\nclass Scaffold {\n  registry: string;\n  requests: Array<string>;\n  results: Array<string>;\n  items: number;\n  constructor() {\n    this.registry = \"\";\n    this.requests = new Array();\n    this.results = new Array()\n    this.items = 0;\n  }\n\n  @initialize({})\n  init({ _registry }: { _registry: string }) {\n    validateAccountId(_registry);\n    this.registry = _registry;\n  }\n  @call({ payableFunction: true})\n  requestData({_oracle, _input, _bounty}: {_oracle: string, _input: string, _bounty: string }): void {\n    const promise = near.promiseBatchCreate(this.registry);\n    near.promiseBatchActionFunctionCall(\n      promise,\n      \"newRequest\",\n      bytes(JSON.stringify({_input: _input, _oracle: _oracle, _bounty: _bounty, _expiresIn: 86_400_000_000_000, _callback: near.currentAccountId()})),\n      near.attachedDeposit(),\n      30_000_000_000_000\n    );\n  }\n  @call({})\n  onDVRequestFilled({_request, _result}: {_request: string, _result: string}): string {\n    assert(predecessorAccountId() == this.registry, \"Unauthorized\");\n    const requests = this.requests.push(_request)\n    const results = this.results.push(_result)\n    this.items = requests\n    near.log(\"EVENT_JSON:\" + JSON.stringify({\n      standard: \"nep171\",\n      version: \"1.0.0\",\n      event: \"result\",\n      data: _result,\n    }))\n    return _request;\n  }\n  @view({})\n  getResults({_i}:{_i: number}): string {\n    return JSON.stringify({length: this.items, request: this.requests[_i], result: this.results[_i]})\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ACCOUNT_ID_REGEX","u8ArrayToBytes","array","reduce","result","value","String","fromCharCode","bytes","stringOrU8Array","checkStringIsBytes","Uint8Array","Error","forEach","character","index","assert","charCodeAt","expression","message","serialize","valueToSerialize","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","deserialize","valueToDeserialize","parse","_","Object","keys","length","every","includes","BigInt","validateAccountId","accountId","test","PromiseResult","PromiseError","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","b","c","encode","Array","from","reverse","acc","i","undefined","decode","alphabet","digits","isArray","map","input","letter","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","U64_MAX","EVICTED_REGISTER","log","params","env","accumulated","parameter","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageRead","returnValue","storage_read","storageWrite","storage_write","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promiseIndex","methodName","amount","gas","promise_batch_action_function_call","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","serializer","deserializer","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","reconstructor","constructor","reconstruct","_requireInit","Scaffold","registry","requests","results","items","init","_registry","requestData","_oracle","_input","_bounty","promise","_expiresIn","_callback","onDVRequestFilled","_request","_result","standard","version","event","getResults","_i","request"],"mappings":"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"}